{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>PyMedX is a fork from a archived project called PyMed: gijswobben/pymedx</p>"},{"location":"#pymedx-pubmed-access-through-python","title":"PyMedX - PubMed Access through Python","text":"<p>PyMedX is a Python library that provides access to PubMed through the PubMed API.</p>"},{"location":"#why-this-library","title":"Why this library?","text":"<p>The PubMed API is not very well documented and querying it in a performant way is too complicated and time consuming for researchers. This wrapper provides access to the API in a consistent, readable and performant way.</p>"},{"location":"#features","title":"Features","text":"<p>This library takes care of the following for you:</p> <ul> <li>Querying the PubMed database (with the standard PubMed query language)</li> <li>Batching of requests for better performance</li> <li>Parsing and cleaning of the retrieved articles</li> </ul>"},{"location":"#examples","title":"Examples","text":"<p>For full (working) examples have a look at the <code>examples/</code> folder in this repository. In essence you only need to import the <code>PubMed</code> class, instantiate it, and use it to query:</p> <pre><code>from pymedx import PubMed\npubmed = PubMed(tool=\"MyTool\", email=\"my@email.address\")\nresults = pubmed.query(\"Some query\", max_results=500)\n</code></pre>"},{"location":"#notes-on-the-api","title":"Notes on the API","text":"<p>The original documentation of the PubMed API can be found here: PubMed Central. PubMed Central kindly requests you to:</p> <ul> <li>Do not make concurrent requests, even at off-peak times; and</li> <li>Include two parameters that help to identify your service or application to   our servers</li> <li>tool should be the name of the application, as a string value with no     internal spaces, and</li> <li>email should be the e-mail address of the maintainer of the tool, and     should be a valid e-mail address.</li> </ul>"},{"location":"#notice-of-non-affiliation-and-disclaimer","title":"Notice of Non-Affiliation and Disclaimer","text":"<p>The author of this library is not affiliated, associated, authorized, endorsed by, or in any way officially connected with PubMed, or any of its subsidiaries or its affiliates. The official PubMed website can be found at https://www.ncbi.nlm.nih.gov/pubmed/.</p>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"changelog/#051-2025-02-19","title":"0.5.1 (2025-02-19)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fix issues with typing annotation and mypy (#18) (5e2814d)</li> <li>Fix multi values in some attributes in PubMedBookArticle (#19) (72d2f74)</li> <li>Implement typing check in run time with typeguard (#17) (4532182)</li> </ul>"},{"location":"changelog/#050-2024-05-24","title":"0.5.0 (2024-05-24)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>allow pymedx to retrieve more than 10k articles from PubMed database (#14) (013f0d0)</li> </ul>"},{"location":"changelog/#040-2024-05-17","title":"0.4.0 (2024-05-17)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>add exponential backoff (#13) (42cf7c3)</li> </ul>"},{"location":"changelog/#031-2024-02-14","title":"0.3.1 (2024-02-14)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>solve bug in extracting date from pmc source (#9) (20dd44e)</li> </ul>"},{"location":"changelog/#030-2024-02-09","title":"0.3.0 (2024-02-09)","text":""},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>add pmc as a source for fetching articles data (#7) (3bb3536)</li> </ul>"},{"location":"changelog/#021-2024-02-04","title":"0.2.1 (2024-02-04)","text":""},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>update scraping code (#6) (220f2bf)</li> </ul>"},{"location":"changelog/#020-2024-02-01","title":"0.2.0 (2024-02-01)","text":""},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Fix linter issues (#4) (12b6e6c)</li> </ul>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>add mindate, maxdate args in query function (#3) (d0fce78)</li> </ul>"},{"location":"changelog/#011-2024-01-31","title":"0.1.1 (2024-01-31)","text":""},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Fix initial linter issues and tests (#2) (22a7eb7)</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>In order to be able to contribute, it is important that you understand the project layout. This project uses the src layout, which means that the package code is located at <code>./src/pymedx</code>.</p> <p>For my information, check the official documentation: https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/</p> <p>In addition, you should know that to build our package we use Poetry, it's a Python package management tool that simplifies the process of building and publishing Python packages. It allows us to easily manage dependencies, virtual environments and package versions. Poetry also includes features such as dependency resolution, lock files and publishing to PyPI. Overall, Poetry streamlines the process of managing Python packages, making it easier for us to create and share our code with others.</p> <p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/osl-incubator/pymedx/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \u201cbug\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \u201cenhancement\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>PyMedX could always use more documentation, whether as part of the official PyMedX docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/osl-incubator/pymedx/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are   welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here\u2019s how to set up <code>pymedx</code> for local development.</p> <ol> <li> <p>Fork the <code>pymedx</code> repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> </li> </ol> <pre><code>$ git clone git@github.com:your_name_here/pymedx.git\n</code></pre> <ol> <li>Install your local into a conda environment. Assuming you have conda     installed, this is how you set up your fork for local development:</li> </ol> <pre><code>$ cd pymedx/\n$ conda env create --file conda/dev.yaml\n$ conda activate pymedx\n$ poetry install\n</code></pre> <ol> <li>Create a branch for local development:</li> </ol> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <pre><code>Now you can make your changes locally.\n</code></pre> <ol> <li>When you\u2019re done making changes, check that your changes pass linter and     tests:</li> </ol> <pre><code>$ makim tests.linter\n$ makim tests.unit\n</code></pre> <ol> <li>Commit your changes and push your branch to GitHub:</li> </ol> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your     new functionality into a function with a docstring, and add the feature to     the list in README.rst.</li> <li>The pull request should work for Python &gt;= 3.8.1</li> </ol>"},{"location":"contributing/#release","title":"Release","text":"<p>This project uses semantic-release in order to cut a new release based on the commit-message.</p>"},{"location":"contributing/#commit-message-format","title":"Commit message format","text":"<p>semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.</p> <p>By default, semantic-release uses Angular Commit Message Conventions. The commit message format can be changed with the <code>preset</code> or <code>config</code> options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins.</p> <p>Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages.</p> <p>The table below shows which commit message gets you which release type when <code>semantic-release</code> runs (using the default configuration):</p> Commit message Release type <code>fix(pencil): stop graphite breaking when pressure is applied</code> Fix Release <code>feat(pencil): add 'graphiteWidth' option</code> Feature Release <code>perf(pencil): remove graphiteWidth option</code> Chore <code>BREAKING CHANGE: The graphiteWidth option has been removed</code> Breaking Release <p>source: https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format</p> <p>As this project uses the <code>squash and merge</code> strategy, ensure to apply the commit message format to the PR's title.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install PyMedX, run this command in your terminal:</p> <pre><code>$ pip install pymedx\n</code></pre> <p>This is the preferred method to install PyMedX, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for PyMedX can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone https://github.com/osl-incubator/pymedx\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/osl-incubator/pymedx/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ poetry install\n</code></pre>"},{"location":"api/references/","title":"Api references","text":""},{"location":"api/references/#pymedx","title":"<code>pymedx</code>","text":"<p>PyMedX package.</p>"},{"location":"api/references/#pymedx-classes","title":"Classes","text":""},{"location":"api/references/#pymedx.PubMed","title":"<code>PubMed</code>","text":"<p>Wrap around the PubMed API.</p>"},{"location":"api/references/#pymedx.PubMed-functions","title":"Functions","text":""},{"location":"api/references/#pymedx.PubMed.__init__","title":"<code>__init__(tool='my_tool', email='my_email@example.com', api_key='')</code>","text":"<p>Initialize the PubMed object.</p> <p>Parameters:</p> Name Type Description Default <code>tool</code> <code>str</code> <p>name of the tool that is executing the query. This parameter is not required but kindly requested by PMC (PubMed Central).</p> <code>'my_tool'</code> <code>email</code> <code>str</code> <p>email of the user of the tool. This parameter is not required but kindly requested by PMC (PubMed Central).</p> <code>'my_email@example.com'</code> <code>api_key</code> <code>str</code> <p>the NCBI API KEY</p> <code>''</code> <p>Returns:</p> Type Description <code>None</code>"},{"location":"api/references/#pymedx.PubMed._exceededRateLimit","title":"<code>_exceededRateLimit()</code>","text":"<p>Check if we've exceeded the rate limit.</p> <p>Returns:</p> Name Type Description <code>exceeded</code> <code>Bool</code> <p>Whether or not the rate limit is exceeded.</p>"},{"location":"api/references/#pymedx.PubMed._get","title":"<code>_get(url, parameters={}, output='json')</code>","text":"<p>Make a request to PubMed.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>last part of the URL that is requested (will be combined with the base url)</p> required <code>parameters</code> <code>dict[Any, Any]</code> <p>parameters to use for the request</p> <code>{}</code> <code>output</code> <code>str</code> <p>type of output that is requested (defaults to JSON but can be used to retrieve XML)</p> <code>'json'</code> <p>Returns:</p> Type Description <code>    - response      Dict / str, if the response is valid JSON it will</code> <p>be parsed before returning, otherwise a string is returend</p>"},{"location":"api/references/#pymedx.PubMed._getArticleIds","title":"<code>_getArticleIds(query, max_results)</code>","text":"<p>Retrieve the article IDs for a query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>query to be executed against the PubMed database.</p> required <code>max_results</code> <code>int</code> <p>the maximum number of results to retrieve.</p> required <p>Returns:</p> Name Type Description <code>article_ids</code> <code>List</code> <p>article IDs as a list.</p>"},{"location":"api/references/#pymedx.PubMed._getArticles","title":"<code>_getArticles(article_ids)</code>","text":"<p>Batch a list of article IDs and retrieves the content.</p> <p>Returns:</p> Type Description <code>    - articles      List, article objects.</code>"},{"location":"api/references/#pymedx.PubMed._wait_to_retry","title":"<code>_wait_to_retry(attempt)</code>","text":"<p>Calculate and wait the appropriate amount of time before a retry.</p> Parameters."},{"location":"api/references/#pymedx.PubMed.getTotalResultsCount","title":"<code>getTotalResultsCount(query)</code>","text":"<p>Return the total number of results that match the query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>the query to send to PubMed</p> required <p>Returns:</p> Name Type Description <code>total_results_count</code> <code>Int</code> <p>total number of results for the query in PubMed</p>"},{"location":"api/references/#pymedx.PubMed.query","title":"<code>query(query, max_results=100)</code>","text":"<p>Execute a query agains the GraphQL schema.</p> <p>Automatically inserting the PubMed data loader.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>the GraphQL query to execute against the schema.</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>ExecutionResult</code> <p>GraphQL object that contains the result in the \"data\" attribute.</p>"},{"location":"api/references/#pymedx.PubMedCentral","title":"<code>PubMedCentral</code>","text":"<p>               Bases: <code>PubMed</code></p> <p>Warp around the PubMedCentral API.</p>"},{"location":"api/references/#pymedx.PubMedCentral-functions","title":"Functions","text":""},{"location":"api/references/#pymedx.PubMedCentral.__init__","title":"<code>__init__(tool='my_tool', email='my_email@example.com', api_key='')</code>","text":"<p>Initialize the PubMedCentral object.</p> <p>Parameters:</p> Name Type Description Default <code>tool</code> <code>str</code> <p>name of the tool that is executing the query. This parameter is not required but kindly requested by PMC (PubMed Central).</p> <code>'my_tool'</code> <code>email</code> <code>str</code> <p>email of the user of the tool. This parameter is not required but kindly requested by PMC (PubMed Central).</p> <code>'my_email@example.com'</code> <code>api_key</code> <code>str</code> <p>the NCBI API KEY</p> <code>''</code> <p>Returns:</p> Type Description <code>None</code>"},{"location":"api/references/#pymedx.PubMedCentral._getArticleIds","title":"<code>_getArticleIds(query, max_results)</code>","text":"<p>Retrieve the article IDs for a query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>query to be executed against the PubMed database.</p> required <code>max_results</code> <code>int</code> <p>the maximum number of results to retrieve.</p> required <p>Returns:</p> Name Type Description <code>article_ids</code> <code>List</code> <p>article IDs as a list.</p>"},{"location":"api/references/#pymedx.PubMedCentral._getArticles","title":"<code>_getArticles(article_ids)</code>","text":"<p>Batch a list of article IDs and retrieves the content.</p> <p>Parameters:</p> Name Type Description Default <code>article_ids</code> <code>list[str]</code> <p>article IDs.</p> required <p>Returns:</p> Name Type Description <code>articles</code> <code>List</code> <p>article objects.</p>"},{"location":"api/references/#pymedx.PubMedCentral.query","title":"<code>query(query, max_results=100)</code>","text":"<p>Execute a query agains the GraphQL schema.</p> <p>Automatically inserting the PubMed data loader.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>the GraphQL query to execute against the schema.</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>ExecutionResult</code> <p>GraphQL object that contains the result in the \"data\" attribute.</p>"},{"location":"api/references/#pymedx-functions","title":"Functions","text":""},{"location":"api/references/#pymedx.get_version","title":"<code>get_version()</code>","text":"<p>Return the program version.</p>"}]}